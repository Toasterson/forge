//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "component")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub version: String,
    pub gate_id: Uuid,
    pub recipe: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::gate::Entity",
        from = "Column::GateId",
        to = "super::gate::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Gate,
    #[sea_orm(has_many = "super::job_to_component_record::Entity")]
    JobToComponentRecord,
    #[sea_orm(has_many = "super::package::Entity")]
    Package,
    #[sea_orm(has_many = "super::push_to_component_record::Entity")]
    PushToComponentRecord,
}

impl Related<super::gate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Gate.def()
    }
}

impl Related<super::job_to_component_record::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::JobToComponentRecord.def()
    }
}

impl Related<super::package::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Package.def()
    }
}

impl Related<super::push_to_component_record::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PushToComponentRecord.def()
    }
}

impl Related<super::job::Entity> for Entity {
    fn to() -> RelationDef {
        super::job_to_component_record::Relation::Job.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::job_to_component_record::Relation::Component
                .def()
                .rev(),
        )
    }
}

impl Related<super::source_repo_push::Entity> for Entity {
    fn to() -> RelationDef {
        super::push_to_component_record::Relation::SourceRepoPush.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::push_to_component_record::Relation::Component
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
