//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "source_to_gate_record")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub source_repo_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub gate_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::gate::Entity",
        from = "Column::GateId",
        to = "super::gate::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Gate,
    #[sea_orm(
        belongs_to = "super::source_repo::Entity",
        from = "Column::SourceRepoId",
        to = "super::source_repo::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    SourceRepo,
}

impl Related<super::gate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Gate.def()
    }
}

impl Related<super::source_repo::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SourceRepo.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::gate::Entity")]
    Gate,
    #[sea_orm(entity = "super::source_repo::Entity")]
    SourceRepo,
}
